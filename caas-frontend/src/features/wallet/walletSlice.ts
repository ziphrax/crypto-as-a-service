import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { Wallet } from '@caas/common/dist/blockchain';
import { createWallet } from './walletAPI';

export interface WalletState {
  wallet: Wallet | undefined;
  wallets: Wallet[];
  status: 'idle' | 'loading' | 'failed' | 'pending';
}

const initialState: WalletState = {
  wallet: undefined,
  wallets: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const createWalletAsync = createAsyncThunk(
  'wallet/createWallet',
  async(wallet: Wallet) => {
    const response = await createWallet(wallet);

    return response.data;
  }
);

export const walletSlice = createSlice({
  name: 'wallet',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createWalletAsync.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(createWalletAsync.fulfilled, (state, action )=> {
        state.status = 'idle';
        state.wallet = action.payload;
        state.wallets.push(action.payload);
      })
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   });
  },
});

export const {  } = walletSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.wallet.value)`
export const selectWallet = (state: RootState) => state.wallet.wallet;
export const selectWallets = (state: RootState) => state.wallet.wallets;

export default walletSlice.reducer;
